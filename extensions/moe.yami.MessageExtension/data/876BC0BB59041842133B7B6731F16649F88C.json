{
    "uid": "876BC0BB59041842133B7B6731F16649F88C",
    "lastModificationTime": 0,
    "items": {
        "name": "MessageTextRenderer",
        "type": "game_script",
        "order": 0,
        "content": "(function() {\n    class MessageTextRendererMessageTokens extends gs.Component_MessageTextRenderer {\n        constructor() {\n            super();\n            \n            let that = this;\n            this.onLinkLabelClick = function(e) {\n                that.clear();\n                SceneManager.scene.interpreter.jumpToLabel(e.data.linkData.labelName);\n            };\n        }\n        \n        processControlToken(token, formattingOnly) {\n            if (formattingOnly) {\n                return super.processControlToken(token, formattingOnly);\n            }\n            let result = null;\n            \n            if (token.code === \"LabelLK\") {\n                if (token.value == 'E') {\n                    let object = new ui.Object_Hotspot();\n                    object.enabled = true;\n                    object.setup();\n                    \n                    this.addCustomObject(object);\n                    \n                    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;\n                    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;\n                    object.dstRect.width = this.currentX - this.customData.linkData.cx;\n                    object.dstRect.height = this.currentLineHeight;\n\n                    object.events.on(\"click\", gs.CallBack(\"onLinkLabelClick\", this), {linkData: this.customData.linkData}, this);\n                }\n                else {\n                    this.customData.linkData = { cx: this.currentX, cy: this.currentY, labelName: token.value.toString(), tokenIndex: this.tokenIndex };\n                }\n            } else if (token.code === \"LabelSLK\") {\n                if (token.value === 'E') {\n                    this.currentSprite.bitmap.clearRect(this.customData.linkData.cx,\n                                                    this.customData.linkData.cy,\n                                                    this.currentX - this.customData.linkData.cx + this.object.font.borderSize*2,\n                                                    this.currentLineHeight);\n                    let line = this.lines[this.line].content;\n                    let linkStart = this.findToken(this.tokenIndex - 1, \"LabelSLK\", -1, line);\n                    let textTokens = this.findTokensBetween(this.customData.linkData.tokenIndex, this.tokenIndex, null, line);\n                    \n                    let object = new ui.Object_Text();\n                    object.text = textTokens.select(function(x) { return x.value; }).join(\"\");\n                    object.sizeToFit = true;\n                    object.formatting = true;\n                    object.wordWrap = false;\n                    object.ui = new ui.Component_UIBehavior();\n                    object.enabled = true;\n                    object.addComponent(new gs.Component_HotspotBehavior());\n                    object.addComponent(object.ui);\n                  \n                    if (this.customData.linkData.styleIndex === -1) {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink\"]);\n                    } else {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink-\" + this.customData.linkData.styleIndex]);\n                    }\n                    \n                    object.setup();\n                    \n                    this.addCustomObject(object);\n                    \n                    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;\n                    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;\n\n                    object.events.on(\"click\", gs.CallBack(\"onLinkLabelClick\", this), { linkData: this.customData.linkData }, this);\n                } else {\n                    let value = token.value.toString();\n                    if (value.contains(\",\")) {\n                        let values = value.split(\",\");\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, labelName: values[0].toString(), styleIndex: parseInt(values[1]), tokenIndex: this.tokenIndex };\n                    } else {\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, labelName: value, tokenIndex: this.tokenIndex, styleIndex: -1 };\n                    }\n                }\n            } else {\n                result = super.processControlToken(token, formattingOnly);\n            }\n                \n            \n            return result;\n        }\n    }\n    \n    gs.Component_MessageTextRenderer = MessageTextRendererMessageTokens;\n}());",
        "parentId": "6E2FCD1369EFC5465D39D5D20AF6E3677A06",
        "folder": false,
        "scriptType": 1,
        "compiledContent": "(function() {\n    class MessageTextRendererMessageTokens extends gs.Component_MessageTextRenderer {\n        constructor() {\n            super();\n            \n            let that = this;\n            this.onLinkLabelClick = function(e) {\n                that.clear();\n                SceneManager.scene.interpreter.jumpToLabel(e.data.linkData.labelName);\n            };\n        }\n        \n        processControlToken(token, formattingOnly) {\n            if (formattingOnly) {\n                return super.processControlToken(token, formattingOnly);\n            }\n            let result = null;\n            \n            if (token.code === \"LabelLK\") {\n                if (token.value == 'E') {\n                    let object = new ui.Object_Hotspot();\n                    object.enabled = true;\n                    object.setup();\n                    \n                    this.addCustomObject(object);\n                    \n                    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;\n                    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;\n                    object.dstRect.width = this.currentX - this.customData.linkData.cx;\n                    object.dstRect.height = this.currentLineHeight;\n\n                    object.events.on(\"click\", gs.CallBack(\"onLinkLabelClick\", this), {linkData: this.customData.linkData}, this);\n                }\n                else {\n                    this.customData.linkData = { cx: this.currentX, cy: this.currentY, labelName: token.value.toString(), tokenIndex: this.tokenIndex };\n                }\n            } else if (token.code === \"LabelSLK\") {\n                if (token.value === 'E') {\n                    this.currentSprite.bitmap.clearRect(this.customData.linkData.cx,\n                                                    this.customData.linkData.cy,\n                                                    this.currentX - this.customData.linkData.cx + this.object.font.borderSize*2,\n                                                    this.currentLineHeight);\n                    let line = this.lines[this.line].content;\n                    let linkStart = this.findToken(this.tokenIndex - 1, \"LabelSLK\", -1, line);\n                    let textTokens = this.findTokensBetween(this.customData.linkData.tokenIndex, this.tokenIndex, null, line);\n                    \n                    let object = new ui.Object_Text();\n                    object.text = textTokens.select(function(x) { return x.value; }).join(\"\");\n                    object.sizeToFit = true;\n                    object.formatting = true;\n                    object.wordWrap = false;\n                    object.ui = new ui.Component_UIBehavior();\n                    object.enabled = true;\n                    object.addComponent(new gs.Component_HotspotBehavior());\n                    object.addComponent(object.ui);\n                  \n                    if (this.customData.linkData.styleIndex === -1) {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink\"]);\n                    } else {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink-\" + this.customData.linkData.styleIndex]);\n                    }\n                    \n                    object.setup();\n                    \n                    this.addCustomObject(object);\n                    \n                    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;\n                    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;\n\n                    object.events.on(\"click\", gs.CallBack(\"onLinkLabelClick\", this), { linkData: this.customData.linkData }, this);\n                } else {\n                    let value = token.value.toString();\n                    if (value.contains(\",\")) {\n                        let values = value.split(\",\");\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, labelName: values[0].toString(), styleIndex: parseInt(values[1]), tokenIndex: this.tokenIndex };\n                    } else {\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, labelName: value, tokenIndex: this.tokenIndex, styleIndex: -1 };\n                    }\n                }\n            } else {\n                result = super.processControlToken(token, formattingOnly);\n            }\n                \n            \n            return result;\n        }\n    }\n    \n    gs.Component_MessageTextRenderer = MessageTextRendererMessageTokens;\n}());"
    }
}