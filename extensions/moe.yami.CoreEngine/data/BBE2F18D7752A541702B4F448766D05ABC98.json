{
    "uid": "BBE2F18D7752A541702B4F448766D05ABC98",
    "lastModificationTime": 0,
    "items": {
        "name": "MessageTextRenderer",
        "type": "game_script",
        "order": 0,
        "content": "(function() {\n    class MessageTextRendererCoreEngine extends gs.Component_MessageTextRenderer {\n        processControlToken(token, formattingOnly) {\n            if (formattingOnly) {\n                return super.processControlToken(token, formattingOnly);\n            }\n            let result = null;\n            \n            if (token.code === \"SLK\") {\n                if (token.value === 'E') {\n                    this.currentSprite.bitmap.clearRect(this.customData.linkData.cx,\n                                                    this.customData.linkData.cy,\n                                                    this.currentX - this.customData.linkData.cx + this.object.font.borderSize*2,\n                                                    this.currentLineHeight);\n                    let line = this.lines[this.line].content;\n                    let linkStart = this.findToken(this.tokenIndex - 1, \"SLK\", -1, line);\n                    let textTokens = this.findTokensBetween(this.customData.linkData.tokenIndex, this.tokenIndex, null, line);\n                    \n                    let object = new ui.Object_Text();\n                    object.text = textTokens.select(function(x) { return x.value; }).join(\"\");\n                    object.sizeToFit = true;\n                    object.formatting = true;\n                    object.wordWrap = false;\n                    object.ui = new ui.Component_UIBehavior();\n                    object.enabled = true;\n                    object.addComponent(new gs.Component_HotspotBehavior());\n                    object.addComponent(object.ui);\n                  \n                    if (this.customData.linkData.styleIndex === -1) {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink\"]);\n                    } else {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink-\" + this.customData.linkData.styleIndex]);\n                    }\n                    \n                    object.setup();\n                    \n                    this.addCustomObject(object);\n                    \n                    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;\n                    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;\n\n                    object.events.on(\"click\", gs.CallBack(\"onLinkClick\", this), { linkData: this.customData.linkData }, this);\n                    \n                    console.log(object)\n                } else {\n                    let value = token.value.toString();\n                    if (value.contains(\",\")) {\n                        let values = value.split(\",\");\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, commonEventId: values[0], styleIndex: parseInt(values[1]), tokenIndex: this.tokenIndex };\n                    } else {\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, commonEventId: token.value, tokenIndex: this.tokenIndex, styleIndex: -1 };\n                    }\n                }\n            } else {\n                result = super.processControlToken(token, formattingOnly);\n            }\n                \n            \n            return result;\n        }\n    }\n    \n    gs.Component_MessageTextRenderer = MessageTextRendererCoreEngine;\n}());",
        "parentId": "0A90532D6EDE6640F68ADE843896B575B866",
        "folder": false,
        "scriptType": 1,
        "compiledContent": "(function() {\n    class MessageTextRendererCoreEngine extends gs.Component_MessageTextRenderer {\n        processControlToken(token, formattingOnly) {\n            if (formattingOnly) {\n                return super.processControlToken(token, formattingOnly);\n            }\n            let result = null;\n            \n            if (token.code === \"SLK\") {\n                if (token.value === 'E') {\n                    this.currentSprite.bitmap.clearRect(this.customData.linkData.cx,\n                                                    this.customData.linkData.cy,\n                                                    this.currentX - this.customData.linkData.cx + this.object.font.borderSize*2,\n                                                    this.currentLineHeight);\n                    let line = this.lines[this.line].content;\n                    let linkStart = this.findToken(this.tokenIndex - 1, \"SLK\", -1, line);\n                    let textTokens = this.findTokensBetween(this.customData.linkData.tokenIndex, this.tokenIndex, null, line);\n                    \n                    let object = new ui.Object_Text();\n                    object.text = textTokens.select(function(x) { return x.value; }).join(\"\");\n                    object.sizeToFit = true;\n                    object.formatting = true;\n                    object.wordWrap = false;\n                    object.ui = new ui.Component_UIBehavior();\n                    object.enabled = true;\n                    object.addComponent(new gs.Component_HotspotBehavior());\n                    object.addComponent(object.ui);\n                  \n                    if (this.customData.linkData.styleIndex === -1) {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink\"]);\n                    } else {\n                        ui.UIManager.addControlStyles(object, [\"hyperlink-\" + this.customData.linkData.styleIndex]);\n                    }\n                    \n                    object.setup();\n                    \n                    this.addCustomObject(object);\n                    \n                    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;\n                    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;\n\n                    object.events.on(\"click\", gs.CallBack(\"onLinkClick\", this), { linkData: this.customData.linkData }, this);\n                    \n                    console.log(object)\n                } else {\n                    let value = token.value.toString();\n                    if (value.contains(\",\")) {\n                        let values = value.split(\",\");\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, commonEventId: values[0], styleIndex: parseInt(values[1]), tokenIndex: this.tokenIndex };\n                    } else {\n                        this.customData.linkData = { cx: this.currentX, cy: this.currentY, commonEventId: token.value, tokenIndex: this.tokenIndex, styleIndex: -1 };\n                    }\n                }\n            } else {\n                result = super.processControlToken(token, formattingOnly);\n            }\n                \n            \n            return result;\n        }\n    }\n    \n    gs.Component_MessageTextRenderer = MessageTextRendererCoreEngine;\n}());"
    }
}